[optimization]
progress = parameters.optimizer.__init__.progress
termination = evaluation
iteration = parameters.termination.iteration
evaluation = parameters.termination.evaluation

[output]
step_ = parameters.optimizer.__init__.step
final = 1
feasible = 1

ps = 0
pf = 1
inequality = 0
equality = 0

[print]
initial = lambda optimizer, optimization: '%%s.%%s.%%u.%%s' %% (optimization.uuid, type(optimizer.GetProblem()).__name__, optimizer.GetProblem().GetNumberOfObjectives(), type(optimizer).__name__)
step = lambda optimizer, optimization: '%%s.iteration=%%u' %% (optimization.uuid, optimization.iteration)
final = lambda optimizer, optimization: '%%s.duration=%%f' %% (optimization.uuid, optimization.duration)

[experiment]
repeat = 15

[problem_switch]
xsinx = 0
camel = 0
shaffer_f6 = 0
shubert = 0
binh = 0
pareto_box = 0
water = 0
rectangle = 0
rotated_rectangle = 0
onl = 0

zdt = 0
zdt1 = 1
zdt2 = 1
zdt3 = 1
zdt4 = 1
zdt5 = 0
zdt6 = 1

uf = 0
uf1 = 0
uf2 = 0
uf3 = 0
uf4 = 0
uf5 = 0
uf6 = 0
uf7 = 0
uf8 = 1
uf9 = 1
uf10 = 1

dtlz = 1
dtlz1 = 0
dtlz2 = 1
dtlz3 = 0
dtlz4 = 0
dtlz5 = 0
dtlz6 = 0
dtlz7 = 0
dtlz5i = 0
dtlz6i = 0
convex_dtlz2 = 0
convex_dtlz3 = 0
convex_dtlz4 = 0
convex_dtlz5 = 0
convex_dtlz6 = 0
convex_dtlz5i = 0
convex_dtlz6i = 0
scaled_dtlz2 = 0
negative_dtlz2 = 0

wfg = 0
wfg1 = 0
wfg2 = 0
wfg3 = 0
wfg4 = 1
wfg5 = 0
wfg6 = 0
wfg7 = 0
wfg8 = 0
wfg9 = 0

fda = 0
fda1 = 1
fda2 = 1
fda3 = 1
fda4 = 1
fda5 = 1

knapsack = 0
greedy_repair_knapsack = 0

tsp = 0
motsp = 0

[optimizer_switch]
sga = 0
rwsga = 0
nsga_ii = 0
constrained_nsga_ii = 0
spea2 = 0
spea2_sde = 0
gde3 = 0
ibea_epsilon = 0
ibea_hd = 0
ar = 0
ar_cd_ = 0
epsilon_moea = 0
tdea = 0
isnps = 0
nsga_iii = 0
ar_dmo = 0
cdas = 0
g_nsga_ii = 0
r_nsga_ii = 1
moea_d_weighted_sum = 0
moea_d_tchebycheff = 0
moea_d_norm_tchebycheff = 0
moea_d_pbi = 0
monte_carlo_hype = 0
fast_monte_carlo_hype = 0
msops = 0
grea = 0
sms_emoa = 0
monte_carlo_sms_emoa = 0
monte_carlo_hv_sms_emoa = 0

[real_crossover_switch]
simulated_binary_crossover = 1
differential_evolution = 0

[real_mutation_switch]
polynomial_mutation = 1

[integer_crossover_switch]
single_point_crossover = 1

[integer_mutation_switch]
bitwise_mutation = 1

[dynamic_bitset_crossover_switch]
single_point_crossover = 1
uniform_crossover = 0

[dynamic_bitset_mutation_switch]
bitwise_mutation = 1

[index_crossover_switch]
single_point_crossover = 1

[index_mutation_switch]
bitwise_mutation = 1

[tsp_crossover_switch]
order_based_crossover = 1
partially_mapped_crossover = 0
position_based_crossover = 0

[tsp_mutation_switch]
displacement_mutation = 0
exchange_mutation = 0
insertion_mutation = 0
inversion_mutation = 1
spread_mutation = 0

[rectangle]
boundaries = parameters.problem.rectangle.boundaries

[rotated_rectangle]
boundaries = parameters.problem.rotated_rectangle.boundaries
direction = lambda nDecisions: [1] * nDecisions

[community_discovery]
graphs = parameters.problem.community_discovery.graphs

[onl]
metrics = parameters.problem.onl.metrics

[zdt]
dist_decisions = -1

[uf]
dist_decisions2 = 2
dist_decisions3 = 3

[dtlz]
objectives = 2
dist_decisions = -1

[dtlz4]
bias_factor = 100

[wfg]
objectives = 10
pos_groups = 2
dist_decisions = 20

[fda]
objectives = 2 3

[knapsack]
objectives = 5 10 15
parameters = parameters.problem.knapsack.random

[tsp]
matrix = parameters.problem.tsp.std

[tsp_crossover]
probability = lambda problem: [1]

[tsp_mutation]
probability = lambda problem: [1 / problem.GetNumberOfDecisions()]

[motsp]
objectives = 5 10 15
matrics = parameters.problem.motsp.random
correlation = -0.2 0 0.2

[real_crossover]
probability = lambda problem: [1]

[integer_crossover]
probability = lambda problem: [1]

[dynamic_bitset_crossover]
probability = lambda problem: [1]

[index_crossover]
probability = lambda problem: [1]

[simulated_binary_crossover]
distribution_index = 20

[differential_evolution]
scaling_factor = 0.5

[real_mutation]
probability = lambda problem: [1 / len(problem.GetBoundary())]

[integer_mutation]
probability = lambda problem: [1 / len(problem.GetDecisionBits())]

[dynamic_bitset_mutation]
probability = lambda problem: [1 / problem.GetNumberOfBits()]

[index_mutation]
probability = lambda problem: [1 / problem.GetNumberOfDecisions()]

[polynomial_mutation]
distribution_index = 20

[optimizer]
solutions = parameters.optimizer.solutions

[boundary]
objective = parameters.optimizer.boundary.objective

[information_separation]
convergence_direction = parameters.optimizer.information_separation.convergence_direction

[isnps]
degree1 = parameters.optimizer.isnps.degree1
degree2 = parameters.optimizer.isnps.degree2
amplification = 3

[ibea]
scaling_factor = 0.05

[msops]
targets = parameters.weight_vectors.sphere
count = parameters.optimizer.msops.cout
factor = 100

[grea]
division = parameters.optimizer.grea.division

[nsga_iii]
; parameters.weight_vectors.flat
; parameters.optimizer.nsga_iii.nbi
reference_set = parameters.optimizer.nsga_iii.nbi

[moea_d]
; parameters.weight_vectors.flat
; parameters.optimizer.moea_d.nbi
weight_vectors = parameters.optimizer.moea_d.nbi
neighborhood_ratio = 0.1

[moea_d_tchebycheff]
adjust = 0.00001

[moea_d_norm_tchebycheff]
adjust = 0.0001

[moea_d_pbi]
penalty = 5
normalize = 1

[monte_carlo_sms_emoa]
sample = 10000

[monte_carlo_hv_sms_emoa]
sample = 10000

[monte_carlo_hype]
sample = 10000

[epsilon_moea]
epsilon = parameters.optimizer.epsilon_moea.epsilon

[tdea]
territory = parameters.optimizer.tdea.territory

[cdas]
angle = parameters.optimizer.cdas.angle

[g_nsga_ii]
reference_point = parameters.optimizer.g_nsga_ii.reference_point

[r_nsga_ii]
reference_point = parameters.optimizer.r_nsga_ii.reference_point
weight = parameters.optimizer.r_nsga_ii.weight
threshold = parameters.optimizer.r_nsga_ii.threshold
